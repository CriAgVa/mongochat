#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mongochat:server');
var http = require('http');

const mongoose = require('mongoose');
const Chat = require('../modelos/M_Chat.js');

var formidable = require("formidable");
var fs = require("fs");

var nChat = mongoose.model("M_Chat");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

//socket.io
var {Server} = require('socket.io');
var io = new Server(server);

  io.on('connection', function(socket){
    var sala = socket.handshake.query.num;
    
    //console.log(socket.handshake.query.num)
          //create function to send status
          var sendStatus = function(status){
            socket.emit('status', status);
          }

          //get chats from mongo collection
          Chat.find({sala:sala}).sort({_id:1}).then(function(res, err){
            //emit the messages
            socket.emit('output', res);
          }).catch((err) => {
            console.log("an error has occurred...")
            throw err});
          //handle input events
          socket.on('input', function(data){
            console.log(data)
            let name = data.nombre;
            let message = data.mensaje;
            let day = data.dia;
            let mes = data.mes;
            let year = data.year;
            let hora = data.hora;
            let minuto = data.minuto;
            let segundo = data.segundo;
            let sala = data.sala;
            let tipo = data.tipo;
            var chat = new nChat({
              nombre: name,
              mensaje: message,
              fecha:{
                dia: day,
                mes: mes,
                year: year,
                hora: {
                  hora: hora,
                  minuto: minuto,
                  segundo: segundo
                }
              },
              sala: sala,
              tipo: tipo
            });

            //chek for name and message
            if(name == '' || message == ''){
              //send error status
              sendStatus('please enter a name and message');
            }else{
              // insert message into db
              chat.save(function(err, res){
                  io.emit('output', [chat]);

                  // send status object
                  sendStatus({
                  message: 'Message sent',
                  clear: true
                  });
                
              });
            }
          });

          //Handle clear
          socket.on('clear', function(data){
            //remove all chats from collection
            Chat.collection.drop(function(){
              //emit cleared
              socket.emit('cleared');
            });
          });

          socket.on('file-meta', function(data){
            socket.in(data.uid).emit("fs-meta",data.metadata);
          })
          socket.on('file-start', function(data){
            socket.in(data.uid).emit("fs-share",{});
          })
          socket.on('file-raw', function(data){
            socket.in(data.uid).emit("fs-share",data.buffer);
          })
        });

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
